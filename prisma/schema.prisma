generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authors {
  id                 String   @id
  bio                String?
  website_url        String?
  social_media_links Json?
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  profiles           profiles @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  books              books[]
}

model books {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_id       String
  category_id     String?     @db.Uuid
  title           String
  description     String?
  cover_image_url String?
  status          book_status @default(DRAFT)
  trope           String?
  published_at    DateTime?   @db.Timestamptz(6)
  created_at      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at      DateTime    @default(now()) @db.Timestamptz(6)
  authors         authors     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  categories      categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  chapters        chapters[]
  reviews         reviews[]
}

model categories {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  books       books[]
}

model chapters {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id              String                 @db.Uuid
  chapter_number       Int
  title                String
  content_url          String
  is_locked            Boolean                @default(true)
  coin_cost            Int                    @default(0)
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  updated_at           DateTime               @default(now()) @db.Timestamptz(6)
  books                books                  @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_chapter_unlocks user_chapter_unlocks[]

  @@unique([book_id, chapter_number])
}

model coin_transactions {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String
  type              String
  amount            Int
  related_entity_id String?  @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  profiles          profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model profiles {
  id                   String                 @id
  username             String?                @unique
  email                String?                @unique
  avatar_url           String?
  coin_balance         Int                    @default(0)
  role                 String                 @default("user")
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  updated_at           DateTime               @default(now()) @db.Timestamptz(6)
  authors              authors?
  coin_transactions    coin_transactions[]
  reviews              reviews[]
  user_chapter_unlocks user_chapter_unlocks[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id    String   @db.Uuid
  user_id    String
  rating     Int
  comment    String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  books      books    @relation(fields: [book_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles   profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([book_id, user_id])
}

model user_chapter_unlocks {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String
  chapter_id  String   @db.Uuid
  unlocked_at DateTime @default(now()) @db.Timestamptz(6)
  chapters    chapters @relation(fields: [chapter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles    profiles @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, chapter_id])
}

enum book_status {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  ARCHIVED
}
